name: Stack App CI and Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-and-release:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      # Add DNS check and configuration
      - name: Configure DNS and Network
        run: |
          echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf
          echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf
          ping -c 1 registry.yarnpkg.com || echo "DNS still resolving..."

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      # Add steps to clean up package manager conflicts
      - name: Clean package manager files
        run: |
          rm -f package-lock.json
          rm -rf node_modules
          yarn cache clean

      # Add network configuration step with retry logic
      - name: Configure Yarn
        run: |
          for i in {1..3}; do
            yarn config set network-timeout 600000 && \
            yarn config set registry "https://registry.yarnpkg.com" && \
            break || sleep 15
          done

      - name: Build Extension
        env:
          NODE_EXTRA_CA_CERTS: /etc/ssl/certs/ca-certificates.crt
          SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
          SYSTEM_CERTIFICATE_PATH: /etc/ssl/certs/ca-certificates.crt
          # Add proxy settings if needed
          http_proxy: ${{ secrets.HTTP_PROXY }}
          https_proxy: ${{ secrets.HTTPS_PROXY }}
        run: |
          # Verify DNS resolution
          host registry.yarnpkg.com
          # Try build with retry logic
          for i in {1..3}; do
            nix build && break || sleep 15
          done

      # Configure Git User (only on main branch pushes)
      - name: Configure Git User
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config user.email "4815162342@lost.com"
          git config user.name "John Locke"

      # Bump Version and Create Tag (only on main branch pushes)
      - name: Bump Version and Create Tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: bump_version
        run: |
          npm install -g standard-version
          standard-version --no-verify --commit-all --release-as patch -m "chore(release): %s [skip ci]"
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      # Push Changes and Tags (only on main branch pushes)
      - name: Push Changes and Tags
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git push origin main --tags

      # Create GitHub Release (only on main branch pushes)
      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.bump_version.outputs.tag }}
          release_name: "Release ${{ steps.bump_version.outputs.tag }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      # Upload Release Asset (only on main branch pushes)
      - name: Upload Release Asset
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./result/stack-app.zip
          asset_name: extension-${{ steps.bump_version.outputs.tag }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

